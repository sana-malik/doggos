{"version":3,"sources":["images/logo.png","components/Header.tsx","Breed.tsx","components/BreedInfoDialog.tsx","utils.ts","components/BreedCard.tsx","components/ComparisonDialog.tsx","components/ComparisonDrawer.tsx","components/BreedGrid.tsx","components/ErrorView.tsx","components/Content.tsx","App.tsx","index.tsx"],"names":["Header","id","padding","backgroundColor","gap","alignItems","src","logo","width","alt","level","flex","type","variant","href","getBreedAttribute","breed","attr","unit","ProfileAttributes","key","title","BreedInfoDialog","props","countryCode","country_code","attributes","map","name","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","image","url","children","BreedCard","onChange","height","objectFit","className","isDismissable","isQuiet","isSelected","selected","ComparisonDialog","breeds","close","headers","align","showDivider","isRowHeader","concat","rows","size","overflowMode","onPress","ComparisonDrawer","setSelected","Option","Select","selectedBreeds","filter","options","value","style","mode","allowClear","placeholder","forEach","includes","length","isDisabled","BreedGrid","breedCards","direction","margin","wrap","justifyContent","ErrorView","error","Content","useState","setBreeds","errorMessage","setErrorMessage","useEffect","fetch","then","response","ok","json","Error","status","res","undefined","catch","e","message","item","App","theme","defaultTheme","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c2f8588.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.c99d2d53.png\";","import { Flex, Heading, Image, Text, DialogTrigger, \n  Dialog, Button, Divider, Content, View } from '@adobe/react-spectrum';\nimport logo from '../images/logo.png';\n\n/* Header of main page \n * Contains: logo, title, about\n */\nfunction Header() {\n  return <View id=\"header\" padding=\"5px\" backgroundColor=\"gray-900\">\n    <Flex gap=\"size-150\" alignItems=\"center\">\n      <Image src={logo} width=\"60px\" alt=\"A good boy, sitting.\" />\n      <Heading level={1} flex=\"1 0 0%\">The Dog Catalog</Heading>\n      <DialogTrigger type=\"popover\">\n        <Button variant=\"overBackground\">About</Button>\n        <Dialog>\n          <Heading>About the Dog Catalog</Heading>\n          <Divider />\n          <Content>\n            <Text>Made by Sana Malik<br />\n              Credits:<br />\n              <ul>\n                <li>Data from <a href=\"https://thedogapi.com/\">The Dog API</a></li>\n                <li>Icon from <a href=\"https://thenounproject.com/\">The Noun Project</a></li>\n              </ul>\n            </Text>\n          </Content>\n        </Dialog>\n      </DialogTrigger>\n    </Flex>\n  </View>\n}\n\nexport default Header;","type Breed = {\n    bred_for: string,\n    breed_group?: string,\n    country_code?: string,\n    origin?: string,\n    height: { imperial: string, metric: string },\n    id: number,\n    image: { id: string, width: number, height: number, url: string },\n    life_span: string,\n    name: string,\n    reference_image_id: string,\n    temperament: string,\n    weight: { imperial: string, metric: string },\n    selected?: boolean\n}\n\nexport function getBreedAttribute(breed: any, attr: string, unit: string) {\n    if (attr === 'height') {\n        return breed[attr][unit] + '\"';\n    } else if (attr === 'weight') {\n        return breed[attr][unit] + ' lbs';\n    } else return breed[attr] || \"Unknown\";\n}\n\nexport const ProfileAttributes = [\n    {\n        key: 'name',\n        title: 'Name'\n    },\n    {\n        key: 'breed_group',\n        title: 'Breed Group'\n    },\n    {\n        key: 'bred_for',\n        title: 'Bred For'\n    },\n    {\n        key: 'origin',\n        title: 'Origin'\n    },\n    {\n        key: 'height',\n        title: 'Height'\n    },\n    {\n        key: 'weight',\n        title: 'Weight'\n    },\n    {\n        key: 'life_span',\n        title: 'Lifespan'\n    },\n    {\n        key: 'temperament',\n        title: 'Temperament'\n    },\n];\n\nexport default Breed;","import { Dialog, Flex, Heading, Divider, Content, View, Text, Image } from '@adobe/react-spectrum';\nimport { getFlagEmoji } from '../utils';\nimport { getBreedAttribute, ProfileAttributes } from '../Breed';\n\nfunction BreedInfoDialog(props: { breed: any }) {\n    const { breed } = props;\n    const { country_code } = breed;\n    const unit = \"imperial\";\n\n    const attributes = ProfileAttributes.map(attr => {\n        return <Text><b>{attr.title}:</b> {getBreedAttribute(breed, attr.key, unit)}<br /></Text>\n    });\n\n    return <Dialog>\n        <Heading>{breed.name} {country_code && getFlagEmoji(country_code)}</Heading>\n        <Divider />\n        <Content>\n            <Flex gap=\"size-400\" alignItems=\"start\">\n                <Image src={breed.image.url} flex=\"0 1 50%\"/>\n                <View children={attributes} />\n            </Flex>\n        </Content>\n    </Dialog>\n}\n\nexport default BreedInfoDialog;","/* from https://dev.to/jorik/country-code-to-flag-emoji-a21 */\nfunction getFlagEmoji(countryCode: string) {\n    return countryCode.toUpperCase()\n        .replace(/./g, char => String.fromCodePoint(127397 + char.charCodeAt(0))\n        );\n}\n\nexport { getFlagEmoji };","import { ActionButton, Image, Checkbox, DialogTrigger, Well } from '@adobe/react-spectrum';\nimport Search from '@spectrum-icons/workflow/Search';\nimport BreedInfoDialog from './BreedInfoDialog';\nimport Breed from '../Breed';\nimport '../css/BreedCard.css';\n\n/* Card view for breeds;\n * Displays image, name, and actions\n */\nfunction BreedCard(props: { breed: Breed, onChange: (selected: boolean) => void }) {\n    const { breed, onChange } = props;\n\n    return <Well width=\"size-3600\">\n        <Image\n            src={breed.image.url}\n            height=\"200px\"\n            objectFit=\"cover\" />\n        <div className=\"breed-name\">{breed.name}</div>\n        <div className=\"card-footer\">\n            <DialogTrigger isDismissable type=\"modal\">\n                <ActionButton aria-label=\"View breed details\" isQuiet>\n                    <Search /> View Details\n                </ActionButton>\n                <BreedInfoDialog breed={breed} />\n            </DialogTrigger>\n            <Checkbox isSelected={breed.selected} onChange={onChange}>Compare</Checkbox>\n        </div>\n    </Well >;\n}\n\nexport default BreedCard;","import {\n    TableView, ButtonGroup, Button, TableHeader, Image,\n    Column, Row, Cell, TableBody, Divider, Dialog, Heading, Content\n} from '@adobe/react-spectrum';\nimport { ProfileAttributes, getBreedAttribute } from '../Breed';\n\n/* Fullscreen modal for comparison */\nfunction ComparisonDialog(props: { breeds: any[], close: () => void }) {\n    const { breeds, close } = props;\n    const unit = \"imperial\";\n\n    const headers = [<Column\n        align=\"end\"\n        showDivider\n        isRowHeader>Attribute\n    </Column>].concat(breeds.map(breed => {\n        return <Column><Image src={breed.image.url} height=\"200px\" objectFit=\"cover\" /></Column>\n    }));\n\n    const rows = ProfileAttributes.map(attr => {\n        return <Row>\n            {[<Cell>{attr.title}</Cell>].concat(breeds.map(breed => {\n                return <Cell>{getBreedAttribute(breed, attr.key, unit)}</Cell>\n            }))}\n        </Row>\n    })\n\n    return <Dialog size=\"L\">\n        <Heading>Breed Comparison</Heading>\n        <Divider />\n        <Content>\n            <TableView overflowMode=\"wrap\" height=\"100%\">\n                <TableHeader children={headers} />\n                <TableBody children={rows} />\n            </TableView>\n        </Content>\n        <ButtonGroup>\n            <Button variant=\"secondary\" onPress={close}>\n                Close\n            </Button>\n        </ButtonGroup>\n    </Dialog>\n}\n\nexport default ComparisonDialog;","import { DialogTrigger, ActionButton, Text, Flex } from '@adobe/react-spectrum'\nimport { Select } from 'antd';\nimport ComparisonDialog from './ComparisonDialog';\n\n/* Displays comparison toolbar in Breed Grid */\nfunction ComparisonDrawer(props: { breeds: any, setSelected: any }) {\n    const { breeds, setSelected } = props;\n    const { Option } = Select;\n    const limit = 4;\n\n    function onChange(selectedBreeds: any[]) {\n        breeds.forEach((breed: any) => {\n            if (selectedBreeds.includes(breed.name)) setSelected(breed, true)\n            else setSelected(breed, false)\n        });\n    }\n\n    const selectedBreeds = breeds.filter((breed: any) => breed.selected).map((breed: any) => breed.name);\n    const options = breeds.map((breed: any) => {\n        return <Option key={breed.id} value={breed.name}>{breed.name}</Option>\n    });\n    return <>\n        <Flex gap=\"size-100\">\n            <div style={{ flex: \"1\" }}>\n                <Select\n                    mode=\"multiple\"\n                    allowClear\n                    style={{ width: '100%' }}\n                    placeholder={`Select up to ${limit} breeds to compare...`}\n                    value={selectedBreeds}\n                    onChange={onChange}\n                    children={options}\n                />\n                {selectedBreeds.length > limit ? <Text>Please select up to {limit} breeds.</Text> : <></>}\n            </div>\n            <DialogTrigger type=\"fullscreen\">\n                <ActionButton isDisabled={selectedBreeds.length <= 1 || selectedBreeds.length > limit}>\n                    Compare Breeds\n                </ActionButton>\n                {(close) => <ComparisonDialog\n                    breeds={breeds.filter((breed: any) => selectedBreeds.includes(breed.name))}\n                    close={close} />}\n            </DialogTrigger>\n        </Flex>\n    </>;\n}\n\nexport default ComparisonDrawer;","import { Divider, Flex } from '@adobe/react-spectrum'\nimport Breed from '../Breed'\nimport BreedCard from './BreedCard'\nimport ComparisonDrawer from './ComparisonDrawer'\nimport '../css/BreedGrid.css'\n\n/* Grid view for breed cards */\nfunction BreedGrid(props: { breeds: Breed[], setSelected: any }) {\n    const { breeds, setSelected } = props;\n\n    const breedCards = breeds.map((breed: Breed) => {\n        return <BreedCard\n            breed={breed}\n            key={breed.id}\n            onChange={(selected: boolean) => setSelected(breed, selected)} />\n    });\n\n    return <Flex direction=\"column\" height=\"100%\">\n        <ComparisonDrawer breeds={breeds} setSelected={setSelected} />\n        <Divider size=\"M\" margin=\"size-100\" />\n        <Flex id=\"main-breed-grid\" wrap gap=\"size-100\" justifyContent=\"space-evenly\">\n            {breedCards}\n        </Flex>\n    </Flex>;\n}\n\nexport default BreedGrid;","import { IllustratedMessage, Heading, Content } from '@adobe/react-spectrum';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\n\n/* Shows error with provided error message */\nfunction ErrorView(props: { error: string}) {\n    const { error } = props;\n    return <IllustratedMessage>\n        <NotFound />\n        <Heading>{error}</Heading>\n        <Content>An error occured while fetching breeds.</Content>\n    </IllustratedMessage>\n}\n\nexport default ErrorView;","import { useEffect, useState } from 'react';\nimport { View } from '@adobe/react-spectrum';\nimport { Spin } from 'antd';\nimport BreedGrid from './BreedGrid';\nimport Breed from '../Breed';\nimport ErrorView from './ErrorView';\n\n/* Main page: content container\n * Display error, loading, or dog grid\n */\nfunction Content() {\n    const [breeds, setBreeds] = useState<Breed[]>();\n    const [errorMessage, setErrorMessage] = useState<string>();\n\n    useEffect(() => {\n        fetch(\"https://api.thedogapi.com/v1/breeds\")\n            .then(response => {\n                if (response.ok) return response.json();\n                else throw new Error(`${response.status}`);\n            })\n            .then(res => {\n                setErrorMessage(undefined);\n                setBreeds(res)\n            })\n            .catch(e => {\n                setBreeds(undefined);\n                setErrorMessage(e.message)\n            });\n    }, []);\n\n    function setSelected(item: Breed, selected: boolean) {\n        item.selected = selected;\n        setBreeds(breeds && [...breeds]);\n    }\n\n    return <View id=\"content\">\n        {\n            (errorMessage && <ErrorView error={errorMessage} />) ||\n            (breeds && <BreedGrid breeds={breeds} setSelected={setSelected} />) ||\n            <View id=\"loading\"><Spin size=\"large\" /></View>\n        }\n    </View>;\n}\n\nexport default Content;","import { defaultTheme, Flex, Provider } from '@adobe/react-spectrum';\nimport Header from './components/Header';\nimport Content from './components/Content';\nimport './css/App.css';\n\nfunction App() {\n  return (\n    <Provider theme={defaultTheme} height=\"100%\">\n      <Flex direction=\"column\" height=\"100%\">\n        <Header />\n        <Content />\n      </Flex>\n    </Provider >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}